name: Release application

on:
  release:
    types: [published]

env:
  BUNDLE_WITHOUT: development
  FASTLANE_SKIP_UPDATE_CHECK: true

jobs:
  # Filter by branch and tag name. Valid release tags: v0.1.0
  check_release:
    name: Check release before build
    runs-on: ubuntu-latest
    if: |
      github.event.release.target_commitish == 'master'
    outputs:
      valid: ${{ steps.check_tag.outputs.VALID }}
      build_type: ${{ steps.check_tag.outputs.BUILD_TYPE }}
      gh_envs: ${{ steps.check_tag.outputs.GH_ENVS }}
    steps:
      - name: Check Tag
        id: check_tag
        run: |
          # To allow nightly builds I can use regex like '^v([0-9]+\.?){3}(-.+)?$'
          # In that case valid tags will be: v0.1.0-nightly, v0.1.0-something, etc.

          # Valid tags: v0.1.0, v0.1.1
          if [[ ${{ github.event.release.tag_name }} =~ ^v([0-9]+\.?){3}$ ]]; then
              echo "VALID=true" >> "$GITHUB_OUTPUT"

              echo "BUILD_TYPE=Release" >> "$GITHUB_OUTPUT"
              echo "GH_ENVS=${{ toJSON('{"env":["release", "upload"]}') }}" >> "$GITHUB_OUTPUT"
          fi

  # Will be triggered only if the release event has valid branch and tag name
  # If it is a release on master branch: upload to Google Play and attach APKs to GH release
  # Otherwise just attach APKs
  build:
    name: Build release
    runs-on: ubuntu-latest
    needs: check_release
    if: needs.check_release.outputs.valid == 'true'
    environment:
      name: ${{ matrix.env }}
    strategy:
      matrix: ${{ fromJson(needs.check_release.outputs.gh_envs) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Prepare env
        uses: ./.github/actions/prepare_env

      # Calculate app's version name and code
      # We don't need to do it on 'master' branch because all PR's alredy bumped version name and code
      # - name: Calculate versionName and versionCode
      #   if: github.event.release.target_commitish != 'master'
      #   run: |
      #     o=($(bundle exec fastlane run release_version_calc token:"${{ secrets.GITHUB_TOKEN }}" branch:"${{ github.event.release.target_commitish }}"))
      #     echo "SEENEVA_VERSION_NAME=${o[-2]}" >> $GITHUB_ENV
      #     echo "SEENEVA_VERSION_CODE=${o[-1]}" >> $GITHUB_ENV

      # Assemble the app. Output APK will be signed using environment's KEYSTORE

      - name: Run assemble task
        if: matrix.env != 'upload'
        run: |
          bundle exec fastlane gh_release_apk build_type:"${{ needs.check_release.outputs.build_type }}" store_data:"${SEENEVA_STORE_DATA}"
        env:
          SEENEVA_STORE_FILE: ${{ github.workspace }}/seeneva.keystore
          SEENEVA_STORE_DATA: ${{ secrets.KEYSTORE }}
          SEENEVA_STORE_PASS: ${{ secrets.KEYSTORE_PASS }}
          SEENEVA_KEY_ALIAS: ${{ secrets.KEYSTORE_ALIAS }}
          SEENEVA_KEY_PASS: ${{ secrets.KEY_PASS }}
          FL_GRADLE_PRINT_COMMAND: false

      - name: Upload apk
        if: matrix.env != 'upload'
        uses: alexellis/upload-assets@0.4.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_paths: '["./app/build/outputs/apk/**/*.apk"]'

      - name: Assemble bundle and upload to GP
        if: matrix.env == 'upload'
        run: |
          bundle exec fastlane gplay_publish_internal store_data:"${SEENEVA_STORE_DATA}"
        env:
          SEENEVA_STORE_FILE: ${{ github.workspace }}/seeneva.keystore
          SEENEVA_STORE_DATA: ${{ secrets.KEYSTORE }}
          SEENEVA_STORE_PASS: ${{ secrets.KEYSTORE_PASS }}
          SEENEVA_KEY_ALIAS: ${{ secrets.KEYSTORE_ALIAS }}
          SEENEVA_KEY_PASS: ${{ secrets.KEY_PASS }}
          FL_GRADLE_PRINT_COMMAND: false
          SUPPLY_JSON_KEY_DATA: ${{ secrets.GP_KEY_DATA }}

      - name: Delete release on failure
        if: ${{ failure() }}
        run: |
          bundle exec fastlane run delete_gh_release token:"${{ secrets.GITHUB_TOKEN }}" tag:"${{ github.event.release.tag_name }}"
